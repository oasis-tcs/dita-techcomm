<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="dita_task_topic" xml:lang="en-Us">
	<title>Strict task</title>
  <abstract>
    <shortdesc>A strict task topic answers the "How do I?" question by
      providing precise step-by-step instructions and other necessary
      information that enables the user to complete the task
      successfully.</shortdesc>
    <!--<shortdesc>The strict task-document type supports the development of instructions for the completion of a procedure. The strict-task document type is built using the general-task information type combined with the strict taskbody constraint</shortdesc>-->
  </abstract>
	<conbody>
    <section id="purpose">
      <title>Purpose</title>
      <p>The purpose of the strict task topic is to provide the reader with
        the following information:</p>
      <ul>
        <li>A concise statement of why, when, where, and by whom the task
          should be performed, as well as what the benefits are</li>
        <li>All the information that they need to perform the task
          successfully</li>
      </ul>
      <p>​ Draft Comment author="dstevens73" ​<b>Comment by dstevens73: </b>.​ Division ​​ Paragraph
        ​ Paragraph ​​ ParagraphParagraph ​​ Division ​​ Draft Comment ​</p>
      <p/>
      <draft-comment author="Dawn Stevens" disposition="Completed">I don't think the purpose of
        general and strict tasks are really any different except for the second sentence in
        general's purpose, so I'm wondering about the emphasis here on the context section (bullet 1)<div>
          <p>Kris Eberlein, 20 October 2022​</p>
          <p> ​Yeah, the purpose statement is weak here. I should have commented to folks at the
            last TC call that these topics were very much first drafts and really need work. I hope
            you can contribute here!​ </p>
          <p>Personally, I'm a big strict task fan; I think it's a work of art. I've used general
            task only for specializations and for storing reusable components, when a implementation
            stores multiple reusable elements in a single file. I've kept waiting for a client who
            needed to conditionally process &lt;preq> and &lt;context>to show up ...​ </p>
        </div><div>
          <p>Kris Eberlein, 25 October 2022​</p>
          <p> ​We need to improve the purpose section. Perhaps cover the purpose in the container
            topic, since it does not difference between the two task types.</p>
        </div></draft-comment>
    </section>
    <!--<section id="section_60F00B0ECB0B4D69AA641E9710B1AA60"><title>The purpose of the standard task information type</title><draft-comment author="robander" audience="spec-editors" time="25 may 2021">It seems wrong to refer to this as the "standard" task type when in fact it is the strict / constrained task type</draft-comment><p id="p_D5ED1C1C9BB841FDB6488701D3C86FCF">Tasks are the essential building blocks to provide procedural information. A task information type answers the "How do I?" question by providing precise step-by-step instructions detailing the requirements that must be fulfilled, the actions that must be performed, and the order in which the actions must be performed. The <xmlelement>task</xmlelement> topic includes sections for describing the context, prerequisites, expected results, and other aspects of a task.</p></section>-->
    <section id="content-model">
      <title>Content model</title>
      <p>The strict task topic contains the following structural
        sections:</p>
      <ol>
        <li>Prerequisites (<xref keyref="elements-prereq"
              ><xmlelement>prereq</xmlelement></xref></li>
        <li>Contextual information (<xref keyref="elements-context"
              ><xmlelement>context</xmlelement></xref></li>
        <li>Steps (<xref keyref="elements-steps"
              ><xmlelement>steps</xmlelement></xref> or <xref
            keyref="elements-steps-informal"
              ><xmlelement>steps-unordered</xmlelement></xref>)</li>
        <li>Result (<xref keyref="elements-result"
              ><xmlelement>result</xmlelement></xref></li>
        <li>Troubleshooting information (<xref
            keyref="elements-tasktroubleshooting"
              ><xmlelement>tasktroubleshooting</xmlelement></xref></li>
        <li>Example (<xmlelement>example</xmlelement>)</li>
        <li>Post-requisites (<xref keyref="elements-postreq"
              ><xmlelement>postreq)</xmlelement></xref></li>
      </ol>
      <p>While all of the above structural components are optional, they
        must occur in the outlined order.</p>
    </section>
    <!--<section id="section_709331EA92CE484FBEC8274342823932"><title>The structure of the <xmlelement>task</xmlelement> topic</title><p id="p_14C0AF0152D04AC8A70306B49E22D705">The <xmlelement>task</xmlelement> element is the top-level element for the strict task topic. The strict task document type contains a <xmlelement>title</xmlelement> and a <xmlelement>taskbody</xmlelement>, a short description or <xmlelement>abstract</xmlelement>, a <xmlelement>prolog</xmlelement>, and <xmlelement>related-links</xmlelement>.</p><p id="p_9286DB98E2CD47D0A53B40DFB0049E0C">The <xmlelement>taskbody</xmlelement> element is the main body element inside a strict task document type. The strict task body has a constrained structure, with these optional elements in the following order:</p><dl><dlentry><dt><xmlelement>prereq</xmlelement> </dt><dd>Describes information that the user needs to know or do before starting the immediate task. This section can occur only once. </dd></dlentry><dlentry><dt><xmlelement>context</xmlelement> </dt><dd>Provides background information for the task. This information helps the users understand the purpose of the task and what they will gain by completing the task correctly. This section is typically brief and does not replace or recreate a concept topic on the same subject, although the context section might include some conceptual information. This section can occur only once. </dd></dlentry><dlentry><dt><xmlelement>steps</xmlelement> </dt><dd>Provides the main content of the task topic. A <xmlelement>task</xmlelement> consists of a series of steps that accomplish the task. The <xmlelement>steps</xmlelement> element must have one or more <xmlelement>step</xmlelement> elements, which provide the specifics about each step in the task. The <xmlelement>steps</xmlelement> element can occur only once. <p id="p_510ED5C99C6A4A38958D579C3E8ABBC2">The <xmlelement>step</xmlelement> element represents an action that a user must follow to accomplish a task. Each <xmlelement>step</xmlelement> in a <xmlelement>task</xmlelement> contains a command <xmlelement>cmd</xmlelement> element which describes the particular action the user must perform to accomplish the overall task. The <xmlelement>step</xmlelement> element can also contain information <xmlelement>info</xmlelement>, tutorial information <xmlelement>tutorialinfo</xmlelement>, a step example <xmlelement>stepxmp</xmlelement>, choices <xmlelement>choices</xmlelement>, a step result <xmlelement>stepresult</xmlelement>, or troubleshooting <xmlelement>steptroubleshooting</xmlelement>, although these are all optional.</p> </dd></dlentry><dlentry><dt><xmlelement>steps-unordered</xmlelement> </dt><dd>Provides alternative content for the <xmlelement>task</xmlelement> topic, allowing for a single step in a procedure or a set of commands that need not be performed in a specific order. </dd></dlentry><dlentry><dt><xmlelement>result</xmlelement> </dt><dd>Describes the expected outcome for the task as a whole. </dd></dlentry><dlentry><dt><xmlelement>tasktroubleshooting</xmlelement></dt><dd>Describes actions that a user might take if the task does not produce the expected results.</dd></dlentry><dlentry><dt><xmlelement>example</xmlelement> </dt><dd>Provides an example that illustrates or supports the task. </dd></dlentry><dlentry><dt><xmlelement>postreq</xmlelement> </dt><dd>Describes steps or tasks that the user should do after the successful completion of the current task. It is often supported by links to the next task or tasks in the <xmlelement>related-links</xmlelement> section. </dd></dlentry></dl></section>-->
		<example otherprops="examples" id="example-strict-task">
      <title>Example</title>
      <p>The following code sample contains a strict task topic:</p>
      <codeblock>&lt;task id="birdhousebuilding"&gt;
    &lt;title&gt;Building a bird house&lt;/title&gt;
    &lt;shortdesc&gt;Building a birdhouse is a perfect activity 
    for adults to share with their children or grandchildren. 
    It can be used to teach about birds, as well as the proper use of tools.
    &lt;/shortdesc&gt;
 &lt;taskbody&gt;
  &lt;prereq&gt;To build a sound birdhouse, you will need a complete set of tools:
  &lt;ul&gt;&lt;li&gt;hand saw&lt;/li&gt;
      &lt;li&gt;hammer ... &lt;/li&gt;
  &lt;/ul&gt;&lt;/prereq&gt;
  &lt;context&gt;Birdhouses provide safe locations for birds to build nests and raise their young.
      They also provide shelter during cold and rainy spells.&lt;/context&gt;
 &lt;steps&gt;
   &lt;step&gt;&lt;cmd&gt;Lay out the dimensions for the birdhouse elements.&lt;/cmd&gt;&lt;/step&gt;
   &lt;step&gt;&lt;cmd&gt;Cut the elements to size.&lt;/cmd&gt;&lt;/step&gt;
   &lt;step&gt;&lt;cmd&gt;Drill a 1 1/2" diameter hole for the bird entrance on the front.&lt;/cmd&gt;
         &lt;info&gt;You need to look at the drawing for the correct placement of the 
               hole.&lt;/info&gt;&lt;/step&gt;
   &lt;!--...--&gt;
  &lt;/steps&gt;
  &lt;result&gt;You now have a beautiful new birdhouse!&lt;/result&gt;
  &lt;postreq&gt;Now find a good place to mount it.&lt;/postreq&gt;
 &lt;/taskbody&gt;
&lt;/task&gt;</codeblock>
    </example>
	</conbody>
</concept>
