<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="choicetable" xml:lang="en-us">
  <title><xmlelement>choicetable</xmlelement></title>
  <shortdesc>The <xmlelement>choicetable</xmlelement> element contains
    information about a set of options <ph rev="2.0">for completing</ph> a
    step.</shortdesc>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>choice
            tables<indexterm><xmlatt>keycol</xmlatt></indexterm><indexterm>overview</indexterm></indexterm>
        <indexterm><xmlelement>choicetable</xmlelement></indexterm>
        <indexterm><xmlatt>keycol</xmlatt></indexterm>
        <indexterm>tables<indexterm>choice tables</indexterm></indexterm>
        <indexterm>task
          elements<indexterm><xmlelement>choicetable</xmlelement></indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <refbody>
    <section id="usage-information" rev="2.0">
      <title>Usage information</title>
      <p><draft-comment author="Eliot Kimber" disposition="Closed">Seem my comment on
            <xmlelement>choices</xmlelement> about more clearly distinguishing
            <xmlelement>choices</xmlelement> from <xmlelement>choicetable</xmlelement>. It seems to
          be a matter of formality in how the choices are presented.<div>
            <p>Kris Eberlein, 31 October 2022</p>
            <p>Marking as "Closed," since no changes to the source are required.</p>
          </div></draft-comment>A choice table provides information when there is more than one way
        to complete a step. It is a simple table with two columns. <draft-comment
          author="Eliot Kimber" disposition="Completed">I would add "Each row represents a single
            choice."<p>I couldn't find any place that the overall content model for choice table as
            a sequence of row is explicitly stated.</p><div>
            <p>Kris Eberlein, 29 October 2022.</p>
            <p>Done.</p>
          </div></draft-comment>The first cell in a row provides a name for the option, and the
        second cell in the row provides instructions for completing the step.<draft-comment
          author="Eliot Kimber" disposition="Completed">I don't think "name for the option" can be
          correct: it has to be more general, like "label or condition indicator for the option". I
          suppose, technically, if all the first-column values are distinct (which they must be or
          it wouldn't be a good choice table), they are "names" in the sense of distinct strings
          associated with a thing" but they aren't "names" in the more general sense of "the way we
          refer to a thing we know". Rather, they are information about why you would choose one
          option or another. Compare "If you have a remote server you want to test on,"
            (<xmlelement>choices</xmlelement>) and "remote server"
            (<xmlelement>choicetable</xmlelement>) with column heading "Testing environment".<div>
            <p>Kris Eberlein, 30 October 2022.</p>
            <p>We really cannot describe the content of the &lt;choption> element as a "label for
              the option," since that potentially will cause misunderstanding in regard to later
              content about using the header how to "provide labels for the columns".</p>
            <p>I altered the sentence so that it read "The first cell in a row names the
              option".</p>
          </div></draft-comment></p>
      <p>An optional header row can provide labels for the columns, if an
        author does not want to use the default labels that are  provided
        by stylesheets.</p>
      <draft-comment author="dstevens73" disposition="Completed">I think I am struggling with this
        review because I feel like the audience has changed. It has been said over and over that the
        spec is not for the writers, people using DITA, but for implementers. But much of this
        content seems very directed to how the content should be written. I don't necessarily
        disagree with the direction, but in this case, I typically give the following guidance to
        clients: use choices when there is more than one way to complete a step that leads to the
        same result. Use choicetable when there is more than one way to complete a step that leads
        to different results (to do x, then y; or if this, then that). Otherwise, writers are often
        inconsistent in which they choose. <div>
          <p>Kris Eberlein, 19 October 2022</p>
          <p>Yes, implementers are the primary audience for the spec, especially the base edition,
            which sets out core architectural principles and normative rules. But we've always known
            that short descriptions are surfaced in a lot of authoring tools as guidance to authors,
            and so want to keep authors in mind as we craft short descriptions and usage
            information.</p>
          <p>Another consideration there is that the element reference topics in the Technical
            Content edition, especially those for task elements, have also had the most
            guidance/tutorial focus. We've removed some (but not all) of that.</p>
          <p>The choice table content for the 1.x versions of the spec was … not very good nor very
            specific. I might well have erred in writing content that reflected how I've always used
            – and seen choice tables used. I set up a call with Robert (starting quite soon!) to
            talk this over.</p>
        </div><div>
          <p>Kris Eberlein, 20 October 2022</p>
          <p>I reworked this topic and reviewed it with Dawn today. I tweaked the "Usage
            information" and added another example. A PDF of the updated topic is attached to a TC
            e-mail; see <xref href="https://lists.oasis-open.org/archives/dita/202210/msg00042.html"
              format="html" scope="external"
              >https://lists.oasis-open.org/archives/dita/202210/msg00042.html</xref></p>
        </div></draft-comment>
    </section>
    <section id="specialization-hierarchy">
      <title>Specialization hierarchy</title>
      <p>The <xmlelement>choicetable</xmlelement> element is specialized from
          <xmlelement>simpletable</xmlelement>. It is defined in the task module.</p>
      <draft-comment author="Zoë Lawson" time="30 Oct 2022" disposition="Closed">If I am remembering
        correctly, in DITA 2.0, we added the ability to span rows and columns to simple tables.
        Since choicetables are specialized from simpletable, are there any interesting consequences
        of potentially being able to span rows/columns in a choice table? <p>These questions came to
          mind when I was reading the @scope attribute description on all the choice table elements. </p><div>
          <p>Kris Eberlein, 30 October 2022</p>
          <p>We did not add the @colspan and @rowspan attributes to &lt;choicetable, so no spanning
            in choice tables.</p>
        </div></draft-comment>
    </section>
    <section id="attributes">
      <title>Attributes</title>
      <p>The following attributes are available on this element: <ph
          conkeyref="reuse-attributes/ref-universalatts"/>, <ph
          conkeyref="reuse-attributes/ref-displayatts"/>, and <ph
          conkeyref="reuse-attributes/ref-simpletableatts"/>.</p>
      <p id="attr-exception" outputclass="attr-exception">For this element, the <xmlatt>keycol</xmlatt> attribute has a default
        value of <keyword>1</keyword>.</p>
    </section>
    <example id="example" otherprops="examples">
      <title>Example</title>
      <p>The following code sample contains a choice table that contains a header row:</p>
      <codeblock>&lt;step&gt;
  &lt;cmd&gt;Create a new filter:&lt;/cmd&gt;
  <b>&lt;choicetable&gt;</b>
    &lt;chhead&gt;
      &lt;choptionhd&gt;Option&lt;/choptionhd&gt;
      &lt;chdeschd&gt;Description&lt;/chdeschd&gt;
    &lt;/chhead&gt;
    &lt;chrow&gt;
      &lt;choption&gt;Command-line interface&lt;/choption&gt;
      &lt;chdesc&gt;Type &lt;codeph>arg -f filter&lt;/codeph>&lt;/chdesc&gt;
    &lt;/chrow&gt;
    &lt;chrow&gt;
      &lt;choption&gt;Product GUI&lt;/choption&gt;
      &lt;chdesc&gt;Click &lt;uicontrol>New Filter&lt;/uicontrol>&lt;/chdesc&gt;
    &lt;/chrow&gt;
  <b>&lt;/choicetable&gt;</b>
&lt;/step&gt;</codeblock>
      <p>The choice table might be rendered in the following way:</p>
      <image placement="break" href="../../images/choicetable.jpg"/>
      <draft-comment author="Eliot Kimber" disposition="Closed"><p>Observation that does not require
          action:</p>Comparing this example with the new example in the updated version Kris
        mentions above, it shows that there are at least two semantically distinct ways that
          <xmlelement>choicetable</xmlelement> can be usefully used:<ul id="ul_r5b_ksq_3vb">
          <li>Alternative ways of accomplishing the same result (CLI or UI)</li>
          <li>Options that have different material results: Attempt cancel vs. force cancel.</li>
        </ul><p>Which in turn are distinct from making a choice where the task could fork into two
          separate sequences of actions (which you'd normally do using substeps or subtasks) (i.e.,
          in the context of a procedure that reflects a flow chart or decision tree rather than a
          simple linear sequence of steps).</p><p>The <xmlelement>choices</xmlelement> and
            <xmlelement>choicetable</xmlelement> markup doesn't make a clear distinction between
          these different use cases. I'm not sure it needs to or even can without more specialized
          markup, but I can see that this could cause confusion for authors who do not have clear
          guideance from their local Information Architect about how to use these elements in their
          tasks.</p><p>It also calls into question the general utility of these specializations
          given you could get the same visual result from their specialization bases with no more
          information design thought effort.</p><p>It feels like either these elements need another
          level of specialization to reflect the more specific use cases (alternative ways to
          perform the step vs alternative ways to respond to the state resulting from earlier steps
          vs action options available at this point in the task.</p><p>I think for myself as a
          technical writer I would tend to try to rewrite the tasks to avoid the need for all but
          the "alternative ways to perform the step" use (i.e., CLI vs UI).</p></draft-comment>
    </example>
  </refbody>
</reference>
