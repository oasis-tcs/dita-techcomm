<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="choicetable" xml:lang="en-us">
  <title><xmlelement>choicetable</xmlelement></title>
  <shortdesc>The <xmlelement>choicetable</xmlelement> element contains
    information about a set of options <ph rev="2.0">for completing</ph> a
    step.</shortdesc>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>choice
            tables<indexterm><xmlatt>keycol</xmlatt></indexterm><indexterm>overview</indexterm></indexterm>
        <indexterm><xmlelement>choicetable</xmlelement></indexterm>
        <indexterm><xmlatt>keycol</xmlatt></indexterm>
        <indexterm>tables<indexterm>choice tables</indexterm></indexterm>
        <indexterm>task
          elements<indexterm><xmlelement>choicetable</xmlelement></indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <refbody>
    <section id="usage-information" rev="2.0">
      <title>Usage information</title>
      <p>A choice table provides information when there is more than one
        way to complete a step. It is a simple table with two columns. The
        first cell in a row provides a name for the option, and the second
        cell in the row provides instructions for completing the step.</p>
      <p>An optional header row can provide labels for the columns, if an
        author does not want to use the default labels that are  provided
        by stylesheets.</p>
      <draft-comment author="dstevens73">I think I am struggling with this review because I feel
        like the audience has changed. It has been said over and over that the spec is not for the
        writers, people using DITA, but for implementers. But much of this content seems very
        directed to how the content should be written. I don't necessarily disagree with the
        direction, but in this case, I typically give the following guidance to clients: use choices
        when there is more than one way to complete a step that leads to the same result. Use
        choicetable when there is more than one way to complete a step that leads to different
        results (to do x, then y; or if this, then that). Otherwise, writers are often inconsistent
        in which they choose. <div>
          <p>Kris Eberlein, 19 October 2022</p>
          <p>Yes, implementers are the primary audience for the spec, especially the base edition,
            which sets out core architectural principles and normative rules. But we've always known
            that short descriptions are surfaced in a lot of authoring tools as guidance to authors,
            and so want to keep authors in mind as we craft short descriptions and usage
            information.</p>
          <p>Another consideration there is that the element reference topics in the Technical
            Content edition, especially those for task elements, have also had the most
            guidance/tutorial focus. We've removed some (but not all) of that.</p>
          <p>The choice table content for the 1.x versions of the spec was … not very good nor very
            specific. I might well have erred in writing content that reflected how I've always used
            – and seen choice tables used. I set up a call with Robert (starting quite soon!) to
            talk this over.</p>
        </div></draft-comment>
    </section>
    <section id="specialization-hierarchy">
      <title>Specialization hierarchy</title>
      <p>The <xmlelement>choicetable</xmlelement> element is specialized from
          <xmlelement>simpletable</xmlelement>. It is defined in the task module.</p>
    </section>
    <section id="attributes">
      <title>Attributes</title>
      <p>The following attributes are available on this element: <ph
          conkeyref="reuse-attributes/ref-universalatts"/>, <ph
          conkeyref="reuse-attributes/ref-displayatts"/>, and <ph
          conkeyref="reuse-attributes/ref-simpletableatts"/>.</p>
      <p id="attr-exception" outputclass="attr-exception">For this element, the <xmlatt>keycol</xmlatt> attribute has a default
        value of <keyword>1</keyword>.</p>
    </section>
    <example id="example" otherprops="examples">
      <title>Example</title>
      <p>The following code sample contains a choice table that contains a header row:</p>
      <codeblock>&lt;step&gt;
  &lt;cmd&gt;Create a new filter:&lt;/cmd&gt;
  <b>&lt;choicetable&gt;</b>
    &lt;chhead&gt;
      &lt;choptionhd&gt;Option&lt;/choptionhd&gt;
      &lt;chdeschd&gt;Description&lt;/chdeschd&gt;
    &lt;/chhead&gt;
    &lt;chrow&gt;
      &lt;choption&gt;Command-line interface&lt;/choption&gt;
      &lt;chdesc&gt;Type &lt;codeph>arg -f filter&lt;/codeph>&lt;/chdesc&gt;
    &lt;/chrow&gt;
    &lt;chrow&gt;
      &lt;choption&gt;Product GUI&lt;/choption&gt;
      &lt;chdesc&gt;Click &lt;uicontrol>New Filter&lt;/uicontrol>&lt;/chdesc&gt;
    &lt;/chrow&gt;
  <b>&lt;/choicetable&gt;</b>
&lt;/step&gt;</codeblock>
      <p>The choice table might be rendered in the following way:</p>
      <image placement="break" href="../../images/choicetable.jpg"/>
    </example>
  </refbody>
</reference>
